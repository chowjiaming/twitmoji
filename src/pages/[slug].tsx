import {PageLayout} from '@/components/layout';
import {api} from '@/utils/api';
import {type GetStaticProps, type NextPage} from 'next';
import Head from 'next/head';
import Image from 'next/image';
import {LoadingPage} from '@/components/loading';
import {PostView} from '@/components/postview';
import {generateSSGHelper} from '@/server/helpers/ssgHelper';

const ProfileFeed = (props: {userId: string}) => {
  const {data, isLoading} = api.posts.getPostsByUserId.useQuery({
    userId: props.userId,
  });

  if (isLoading) {
    return <LoadingPage />;
  }

  if (!data || data.length === 0) {
    return <div>User has no posts!</div>;
  }

  return (
    <div className="flex flex-col">
      {data.map((fullPost) => (
        <PostView key={fullPost.post.id} {...fullPost} />
      ))}
    </div>
  );
};

const ProfilePage: NextPage<{username: string}> = ({username}) => {
  const {data} = api.profile.getUserByUsername.useQuery({
    username,
  });

  if (!data || !data.username) {
    return <div>404</div>;
  }

  return (
    <>
      <Head>
        <title>{`Twitmoji | ${data.username}`}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <div className="relative h-36 bg-slate-600">
          <Image
            src={data.profileImageUrl}
            alt={`${data.username ?? ''} profile pic`}
            width={128}
            height={128}
            className="absolute bottom-0 left-0 -mb-[64px] ml-4 rounded-full border-4 border-black"
          />
        </div>
        <div className="h-[64px]" />
        <div className="p-4 text-2xl font-bold">{`@${data.username}`}</div>
        <div className="w-full border-b border-slate-400" />
        <ProfileFeed userId={data.id} />
      </PageLayout>
    </>
  );
};

export const getStaticProps: GetStaticProps = async (context) => {
  const helpers = generateSSGHelper();
  const slug = context.params?.slug;

  if (typeof slug !== 'string') {
    throw new Error('Slug is not a string');
  }

  const username = slug.replace('@', '');

  await helpers.profile.getUserByUsername.prefetch({username});

  return {
    props: {
      trpcState: helpers.dehydrate(),
      username,
    },
  };
};

export const getStaticPaths = () => {
  return {
    paths: [],
    fallback: 'blocking',
  };
};

export default ProfilePage;
