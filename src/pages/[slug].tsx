import {createServerSideHelpers} from '@trpc/react-query/server';
import {appRouter} from '@/server/api/root';
import {prisma} from '@/server/db';
import superjson from 'superjson';
import {PageLayout} from '@/components/layout';
import {api} from '@/utils/api';
import {type GetStaticProps, type NextPage} from 'next';
import Head from 'next/head';

const ProfilePage: NextPage<{username: string}> = ({username}) => {
  const {data} = api.profile.getUserByUsername.useQuery({
    username,
  });

  if (!data || !data.username) {
    return <div>404</div>;
  }

  return (
    <>
      <Head>
        <title>{`Twitmoji | ${data.username}`}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <div>{data.username}</div>
      </PageLayout>
    </>
  );
};

export const getStaticProps: GetStaticProps = async (context) => {
  const helpers = createServerSideHelpers({
    router: appRouter,
    ctx: {
      prisma,
      userId: null,
    },
    transformer: superjson, // optional - adds superjson serialization
  });

  const slug = context.params?.slug;

  if (typeof slug !== 'string') {
    throw new Error('Slug is not a string');
  }

  const username = slug.replace('@', '');

  await helpers.profile.getUserByUsername.prefetch({username});

  return {
    props: {
      trpcState: helpers.dehydrate(),
      username,
    },
  };
};

export const getStaticPaths = () => {
  return {
    paths: [],
    fallback: 'blocking',
  };
};

export default ProfilePage;
